name: Build source and wheels and publish to PyPI

on:  # uses a token, so never run on untrusted input (e.g. PRs)
  release:
    types: [published]
  push:
    branches:
      - test-build

jobs:
  build_sdist:
    name: Source distribution
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build dependencies
        run: python -m pip install build

      - name: Build source package
        run: python -m build

      - name: Store artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dists
          path: dist/*.tar.gz

  build_wheels:
    name: Build wheels on ${{ matrix.os }} for ${{ matrix.cibw_archs }}
    runs-on: ${{ matrix.os }}
    env:
      CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
      CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-*"
      CIBW_SKIP: "*musllinux*"
      BUILD_PLATFORM_INDEPENDENT: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            cibw_archs: "x86_64"
          - os: windows-latest
            cibw_archs: "AMD64"
          - os: macos-latest
            cibw_archs: "x86_64"
            macos_use_gcc: true  # can get openmp to work with GCC
          - os: macos-latest
            cibw_archs: "arm64"
            no_openmp: true  # cannot get it to work in GCC or Clang for arm64

    steps:
      - uses: actions/checkout@v3

      - name: use GCC (explicitly for MacOS x86_64) # can only get it to work with GCC
        if: ${{ matrix.macos_use_gcc }}
        run: |
          echo "CC=gcc-12" >> $GITHUB_ENV

      - name: build without OpenMP
        if: ${{ matrix.no_openmp }}
        run: |
          echo "BUILD_NO_OPENMP=1" >> $GITHUB_ENV  

      - name: Build wheels for CPython ${{ matrix.cibw_build }}
        uses: pypa/cibuildwheel@v2.12.3
        env:
          CIBW_ARCHS: ${{ matrix.cibw_archs }}

      - uses: actions/upload-artifact@v3
        with:
          name: dists
          path: wheelhouse/*.whl
          if-no-files-found: error

  publish_pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build_sdist, build_wheels]
    if: github.event_name == 'release'
    steps:
    - uses: actions/checkout@v3

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: dists
        path: dist

    - name: Publish package
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_KEY }}